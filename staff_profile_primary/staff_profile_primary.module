<?php

use \Drupal\node\Entity\Node;
use \Drupal\user\Entity\User;
use \Drupal\Component\Utility\Random;
use \Drupal\encrypt\Entity\EncryptionProfile;

/**
 * Implements hook_rebuild()
 */
function staff_profile_primary_rebuild() {
  staff_profile_primary_profile_from_database();
}

/**
 * Implements hook_cron().
 */
function staff_profile_primary_cron() {
  staff_profile_primary_profile_from_database();
}

function staff_profile_primary_profile_from_database () {
  // Get all Staff Profile nodes
  $nids = \Drupal::entityQuery('node')->condition('type','staff_profile')->execute();
  $nodes =  Node::loadMultiple($nids);

  // Get the config, and make sure it looks complete
  $primary_config = \Drupal::config('staff_profile_primary.settings');
  if (empty($primary_config->get('db_password'))) {
    \Drupal::logger('staff_profile_primary')->warning('Doesn\'t look like Staff Profile primary is configured properly in the settings form.');
    return;
  }

  // Get the database login informatio out of config
  $encrypt_profile = EncryptionProfile::load($primary_config->get('sync_encrypt_profile'));
  $db_password = \Drupal::service('encryption')->decrypt( $primary_config->get('db_password'), $encrypt_profile);
  $db_database = \Drupal::service('encryption')->decrypt($primary_config->get('db_database'), $encrypt_profile);
  $db_username = \Drupal::service('encryption')->decrypt($primary_config->get('db_username'), $encrypt_profile);
  $db_server = \Drupal::service('encryption')->decrypt($primary_config->get('db_address'), $encrypt_profile);


  // Query the staff profiles from the database
  $dbhandle = sqlsrv_connect($db_server, array('Database' => $db_database, 'UID' => $db_username, 'PWD' => $db_password));
  if ($dbhandle === FALSE) {
    \Drupal::logger('staff_profile_primary')->error('Couldn\'t connect to SQL Server on ' . $db_server);
    return;
  }

  // Make sure we can read from the database
  $results = sqlsrv_query($dbhandle, 'dbo.Staff_GetFullDirectory');
  if ($results === false) {
    \Drupal::logger('staff_profile_primary')->error(print_r(sqlsrv_errors(), true));
    sqlsrv_close($dbhandle);
    return;
  }

  // Read all the profiles into an array
  $profiles = array();
  while ($profile = sqlsrv_fetch_object($results)) {
    $profiles[] = $profile;
  }
  sqlsrv_close($dbhandle);

  // Make sure we have the minimum number of staff from the database. If not, the database may not have gotten populated correctly
  if (count($profiles) < $primary_config->get('minimum_staff')) {
    \Drupal::logger('staff_profile_primary')->info('Expected records: ' . $primary_config->get('minimum_staff') . ' Received: ' . count($profiles) . ' - Something could be wrong, so exiting import of records');
    return;
  }

  // Unpublish all published nodes from the Staff Directory Database
  foreach ($nodes as $node) {
    if ($node->isPublished() && !empty($node->field_staffid->value)) {
      $node->set('field_unpublish_on_sync', TRUE)->save();
    }
  }

  $count = 0;
  foreach($profiles as $profile) {

    // Find the node that matches the profile, if one exists
    $mynode = '';
    foreach ($nodes as $node) {
      if (strtolower($node->field_email->value) == strtolower($profile->email)) {
        $mynode = $node;
        break;
      }
    }

    // Don't let the Job Title start with, or end with ' - '
    $jobtitle = $profile->JobTitle;
    if (substr($jobtitle, 0, 3) === ' - ') {
      $jobtitle = '';
    } elseif (substr($jobtitle,  -3) === ' - ') {
      $jobtitle = substr($jobtitle, 0, strlen($jobtitle)  - 3);
    }

    // Need to create a node
    if (empty($mynode)) {
      $mynode = Node::create(array('type' => 'staff_profile', 'title' => $profile->LastName . ', ' . $profile->FirstName));
      $mynode->field_email->value = $profile->email;
      $mynode->field_netid->value = str_replace('@iastate.edu', '', strtolower($profile->email));
      $mynode->field_preferred_name->value = $profile->FirstName;
      $mynode->field_preferred_phone->value = $profile->Phone;
      $mynode->field_working_title = $jobtitle;
    }

    $mynode->field_staffid->value = $profile->StaffID;
    $mynode->field_staff_profile_first_name->value = $profile->FirstName;
    $mynode->field_last_name->value = $profile->LastName;
    $mynode->field_addr = array(
      'country_code' => 'US',
      'address_line1' => $profile->Address1,
      'address_line2' => $profile->Address2,
      'locality' => $profile->City,
      'administrative_area' => $profile->State,
      'postal_code' => $profile->Zip,
    );
    $mynode->field_departmentid->value = $profile->DepartmentID;
    $mynode->field_job_title->value = $jobtitle;
    $mynode->field_phone->value = $profile->Phone;
    $mynode->field_fax->value = $profile->Fax;

    $taxonomy = taxonomy_term_load_multiple_by_name($profile->CountyName, 'counties_in_iowa');
    $base_county = (!empty($taxonomy) ? array_keys($taxonomy)[0] : 0);
    $mynode->field_base_county = [['target_id' => $base_county]];

    $mynode->field_college = [['value' => $profile->CollegeName]];
    $mynode->field_location = [['value' => $profile->Location]];

    $mynode->field_region->value = (!empty($profile->ExtensionArea) && (intval($profile->ExtensionArea) > 0)) ? $profile->ExtensionArea : '';

    $mynode->field_counties_served = [array()];
    $temp_array = explode(', ', $profile->CountiesServed);
    foreach ($temp_array as $index => $temp_term) {
      $taxon = taxonomy_term_load_multiple_by_name($temp_term, 'counties_in_iowa');
      if (!empty($taxon) && array_keys($taxon)[0] > 0) {
        $mynode->field_counties_served[] = ['target_id' => array_keys($taxon)[0]];
      }
    }

    $mynode->field_program_areas = [array()];
    $temp_array = explode(', ', $profile->ProgramAreas);
    foreach ($temp_array as $index => $temp_term) {
      $taxon = taxonomy_term_load_multiple_by_name($temp_term, 'program_areas');
      if (!empty($taxon) && array_keys($taxon)[0] > 0) {
        $mynode->field_program_areas[] = ['target_id' => array_keys($taxon)[0]];
      }
    }

    $mynode->set('field_unpublish_on_sync', FALSE);
    $mynode->setPublished();
    $mynode->save();

    $count++;
  }

  foreach ($nodes as $node) {
    if ($node->get('field_unpublish_on_sync')->value) {
      $node->set('field_unpublish_on_sync', FALSE);
      $node->setUnpublished();
      $node->save();
    }
  }

  \Drupal::logger('staff_profile_primary')->info('Staff from Staff Directory Database: ' . $count);
}

/*
 * Implements hook_preprocess_views_view()
 */
function staff_profile_primary_preprocess_views_view(&$variables) {
  $variables['#cache']['contexts'][] = 'route';
  if ($variables['view_array']['#name'] == 'staff_directory') {
    $variables['#attached']['library'][] = 'staff_profile_primary/staff_directory';
  }
}

/**
 * Implements hook_form_alter().
 */
function staff_profile_primary_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Make sure we're on the staff_profile node edit screen
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getType() == 'staff_profile') {

    // Set Many fields to readonly when user does't have "edit any staff_profile content" permission
    $user = \Drupal::currentUser();
    if (!$user->hasPermission('edit any staff_profile content') && !empty($node->field_staffid->value)) {
      staff_profile_mark_database_fields_readonly($form);
    }
    // Disable Sort order, not needed on the primary site
    $form['field_sort_order']['widget'][0]['value']['#access'] = FALSE;
    $form['field_sort_order']['widget'][0]['value']['#disabled'] = TRUE;
    $form['field_sort_order']['widget'][0]['value']['#description'] = 'Sort order isn\'t used on this site, so it\'s disabled.';

  }
}

/*
 * Implements hook_ENTITY_TYPE_presave()
 */
function staff_profile_primary_node_presave($entity) {
  if ($entity->getType() == 'staff_profile') {
    // Set the owner of the new node, will probably need to create the user
    $users =\Drupal::entityTypeManager()->getStorage('user')->loadByProperties(array('name' => $entity->field_netid->value));
    $owner = reset($users);
    if (!$owner) {
      $owner = User::create(array('name' => $entity->field_netid, 'mail' => $entity->field_email, 'pass' => Random::string(40)));
      $owner->activate()->save();
    }
    $entity->setOwner($owner);
    $entity->setTitle($entity->field_preferred_name->value . ' ' . $entity->field_last_name->value);
  }
}
